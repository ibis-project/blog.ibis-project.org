<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Ibis Project Blog</title><link href="http://blog.ibis-project.org/" rel="alternate"></link><link href="/atom.xml" rel="self"></link><id>http://blog.ibis-project.org/</id><updated>2015-08-02T22:22:00-07:00</updated><entry><title>Using other compute engines with Ibis</title><link href="http://blog.ibis-project.org/articles/2015/08/02other-compute-engines/" rel="alternate"></link><updated>2015-08-02T22:22:00-07:00</updated><author><name>Wes McKinney</name></author><id>tag:blog.ibis-project.org,2015-08-02:articles/2015/08/02other-compute-engines/</id><summary type="html">

&lt;p&gt;Several people have asked me about using Ibis with execution engines other than
Impala. The purpose of this post is to explain how one can make Ibis work with
other systems and what that might mean for the actual users.&lt;/p&gt;


&lt;h2&gt;Context&lt;/h2&gt;
&lt;p&gt;A primary goal of Ibis is to enable users to productively solve data analysis
problems at any scale using 100% Python code, while leveraging the existing
ecosystem of 3rd party libraries and high performance computing tools as much
as possible. Personally, I'd like to see folks using tools like Cython to
accelerate mission-critical analytics on a petabyte of data, and we simply are
not there yet.&lt;/p&gt;
&lt;p&gt;"100% Python" is not a gimmick; it means that Ibis, among other things, will
also need to enable full utilization of the data analysis capabilities provided
by SQL without writing any actual SQL code. The "writing SQL [in Python]
without writing SQL" is such an important, and frankly nuanced, topic that I'm
going to write a dedicated follow up blog post about it.&lt;/p&gt;
&lt;p&gt;Starting in late 2014, I began developing a joint roadmap with the Impala team
at Cloudera to solve the painful performance and usability problems that Python
programmers experience at large scale (multi-terabyte to petabyte
workloads). Since I've been focused on support and integration with Impala
(which I understand not everyone has available yet), people have asked me about
using Ibis with other systems like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Other SQL-on-Hadoop compute engines: Hive, Presto, and others&lt;/li&gt;
&lt;li&gt;Other "full-stack" (storage + compute) SQL engines: PostgreSQL, MySQL,
  Vertica, etc.&lt;/li&gt;
&lt;li&gt;Generalized compute engines: Spark&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Short answer: yes, if someone writes an Ibis expression translator for these
platform targets, they can be used with them with no problems. Where things get
dicey is how to make Python &lt;em&gt;user-defined functions&lt;/em&gt; (which can't be compiled
to SQL or some other form) run fast (or run at all); something that we are
doing internal work in Impala to enable.&lt;/p&gt;
&lt;p&gt;I'm really excited in particular to see more SQL-based backends built for Ibis
so that data analysts can just use Python instead of a mix of Python and SQL
(the unfortunate status quo). It's not as much work as you might think.&lt;/p&gt;
&lt;h2&gt;Building new SQL backends for Ibis&lt;/h2&gt;
&lt;p&gt;Ibis contains a fully-decoupled data expression API that implements a &lt;em&gt;superset
of SQL semantics&lt;/em&gt;. My view is that if you can write it in SQL, you should be
able to write it in a composable, reusable, and testable Pythonic (or
pandas-ic?) way with Ibis.&lt;/p&gt;
&lt;p&gt;When you build and execute an Ibis expression using Impala SQL, here's what
happens:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;The expression is analyzed and validated (types and relational semantics)
   while you're building it. So when you want to execute it you can be sure that
   it is valid. All of this code lives in &lt;code&gt;ibis/expr&lt;/code&gt; in the codebase. I'll
   definitely write some follow up posts and documentation going into detail on
   the expression API design.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The expression is "compiled" to identify each component corresponding to the
   parts of a SQL statement. See &lt;code&gt;ibis/sql/compiler.py&lt;/code&gt; (NB. this module may
   move in the future).&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In this step, further analysis takes place to expand higher-level Ibis
  constructs into concrete low-level SQL primitives.&lt;/li&gt;
&lt;li&gt;Note this even handles all the SQL "weird stuff" like correlated
  subqueries; I'll write more technical detail about this in the future.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The compiled SELECT data structure is translated into a valid SQL query. This
   falls into two buckets of functionality:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ibis/sql/ddl.py&lt;/code&gt;: the primary SQL statement builder classes.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ibis/sql/exprs.py&lt;/code&gt;: translates Ibis operations and arguments into
  concrete SQL function calls. This includes all built-in analytical
  functions functions, case statements, "synthetic" operations like
  bucketing, window functions, and so forth.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;To give you a concrete example, the Ibis code&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;37&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;bucket&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;float_col&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bucket&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;38&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;double_pct&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;double_col&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;double_col&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;39&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;expr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mutate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bucket&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;bucket&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;double_pct&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;double_pct&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="o"&gt;....&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;         &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group_by&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;bucket&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;string_col&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
   &lt;span class="o"&gt;....&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;         &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;double_pct&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;summary&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;expr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
   &lt;span class="n"&gt;bucket&lt;/span&gt; &lt;span class="n"&gt;string_col&lt;/span&gt;  &lt;span class="n"&gt;count&lt;/span&gt;  &lt;span class="n"&gt;nulls&lt;/span&gt;       &lt;span class="nb"&gt;min&lt;/span&gt;       &lt;span class="nb"&gt;max&lt;/span&gt;       &lt;span class="nb"&gt;sum&lt;/span&gt;      &lt;span class="n"&gt;mean&lt;/span&gt;  &lt;span class="n"&gt;approx_nunique&lt;/span&gt;
&lt;span class="mi"&gt;0&lt;/span&gt;       &lt;span class="mi"&gt;0&lt;/span&gt;          &lt;span class="mi"&gt;1&lt;/span&gt;    &lt;span class="mi"&gt;730&lt;/span&gt;      &lt;span class="mi"&gt;0&lt;/span&gt;  &lt;span class="mf"&gt;0.000030&lt;/span&gt;  &lt;span class="mf"&gt;0.000030&lt;/span&gt;  &lt;span class="mf"&gt;0.022222&lt;/span&gt;  &lt;span class="mf"&gt;0.000030&lt;/span&gt;               &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt;       &lt;span class="mi"&gt;0&lt;/span&gt;          &lt;span class="mi"&gt;4&lt;/span&gt;    &lt;span class="mi"&gt;730&lt;/span&gt;      &lt;span class="mi"&gt;0&lt;/span&gt;  &lt;span class="mf"&gt;0.000122&lt;/span&gt;  &lt;span class="mf"&gt;0.000122&lt;/span&gt;  &lt;span class="mf"&gt;0.088889&lt;/span&gt;  &lt;span class="mf"&gt;0.000122&lt;/span&gt;               &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt;       &lt;span class="mi"&gt;1&lt;/span&gt;          &lt;span class="mi"&gt;6&lt;/span&gt;    &lt;span class="mi"&gt;730&lt;/span&gt;      &lt;span class="mi"&gt;0&lt;/span&gt;  &lt;span class="mf"&gt;0.000183&lt;/span&gt;  &lt;span class="mf"&gt;0.000183&lt;/span&gt;  &lt;span class="mf"&gt;0.133333&lt;/span&gt;  &lt;span class="mf"&gt;0.000183&lt;/span&gt;               &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="mi"&gt;3&lt;/span&gt;       &lt;span class="mi"&gt;1&lt;/span&gt;          &lt;span class="mi"&gt;9&lt;/span&gt;    &lt;span class="mi"&gt;730&lt;/span&gt;      &lt;span class="mi"&gt;0&lt;/span&gt;  &lt;span class="mf"&gt;0.000274&lt;/span&gt;  &lt;span class="mf"&gt;0.000274&lt;/span&gt;  &lt;span class="mf"&gt;0.200000&lt;/span&gt;  &lt;span class="mf"&gt;0.000274&lt;/span&gt;               &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="mi"&gt;4&lt;/span&gt;       &lt;span class="mi"&gt;0&lt;/span&gt;          &lt;span class="mi"&gt;3&lt;/span&gt;    &lt;span class="mi"&gt;730&lt;/span&gt;      &lt;span class="mi"&gt;0&lt;/span&gt;  &lt;span class="mf"&gt;0.000091&lt;/span&gt;  &lt;span class="mf"&gt;0.000091&lt;/span&gt;  &lt;span class="mf"&gt;0.066667&lt;/span&gt;  &lt;span class="mf"&gt;0.000091&lt;/span&gt;               &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="mi"&gt;5&lt;/span&gt;       &lt;span class="mi"&gt;0&lt;/span&gt;          &lt;span class="mi"&gt;0&lt;/span&gt;    &lt;span class="mi"&gt;730&lt;/span&gt;      &lt;span class="mi"&gt;0&lt;/span&gt;  &lt;span class="mf"&gt;0.000000&lt;/span&gt;  &lt;span class="mf"&gt;0.000000&lt;/span&gt;  &lt;span class="mf"&gt;0.000000&lt;/span&gt;  &lt;span class="mf"&gt;0.000000&lt;/span&gt;               &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="mi"&gt;6&lt;/span&gt;       &lt;span class="mi"&gt;1&lt;/span&gt;          &lt;span class="mi"&gt;5&lt;/span&gt;    &lt;span class="mi"&gt;730&lt;/span&gt;      &lt;span class="mi"&gt;0&lt;/span&gt;  &lt;span class="mf"&gt;0.000152&lt;/span&gt;  &lt;span class="mf"&gt;0.000152&lt;/span&gt;  &lt;span class="mf"&gt;0.111111&lt;/span&gt;  &lt;span class="mf"&gt;0.000152&lt;/span&gt;               &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="mi"&gt;7&lt;/span&gt;       &lt;span class="mi"&gt;1&lt;/span&gt;          &lt;span class="mi"&gt;7&lt;/span&gt;    &lt;span class="mi"&gt;730&lt;/span&gt;      &lt;span class="mi"&gt;0&lt;/span&gt;  &lt;span class="mf"&gt;0.000213&lt;/span&gt;  &lt;span class="mf"&gt;0.000213&lt;/span&gt;  &lt;span class="mf"&gt;0.155556&lt;/span&gt;  &lt;span class="mf"&gt;0.000213&lt;/span&gt;               &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="mi"&gt;8&lt;/span&gt;       &lt;span class="mi"&gt;1&lt;/span&gt;          &lt;span class="mi"&gt;8&lt;/span&gt;    &lt;span class="mi"&gt;730&lt;/span&gt;      &lt;span class="mi"&gt;0&lt;/span&gt;  &lt;span class="mf"&gt;0.000244&lt;/span&gt;  &lt;span class="mf"&gt;0.000244&lt;/span&gt;  &lt;span class="mf"&gt;0.177778&lt;/span&gt;  &lt;span class="mf"&gt;0.000244&lt;/span&gt;               &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="mi"&gt;9&lt;/span&gt;       &lt;span class="mi"&gt;0&lt;/span&gt;          &lt;span class="mi"&gt;2&lt;/span&gt;    &lt;span class="mi"&gt;730&lt;/span&gt;      &lt;span class="mi"&gt;0&lt;/span&gt;  &lt;span class="mf"&gt;0.000061&lt;/span&gt;  &lt;span class="mf"&gt;0.000061&lt;/span&gt;  &lt;span class="mf"&gt;0.044444&lt;/span&gt;  &lt;span class="mf"&gt;0.000061&lt;/span&gt;               &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;internally runs the SQL query&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;bucket&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;string_col&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;double_pct&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="k"&gt;count&lt;/span&gt;&lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
       &lt;span class="k"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;double_pct&lt;/span&gt; &lt;span class="k"&gt;IS&lt;/span&gt; &lt;span class="k"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="n"&gt;nulls&lt;/span&gt;&lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;double_pct&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="k"&gt;min&lt;/span&gt;&lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
       &lt;span class="k"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;double_pct&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="k"&gt;max&lt;/span&gt;&lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;double_pct&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="k"&gt;sum&lt;/span&gt;&lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
       &lt;span class="k"&gt;avg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;double_pct&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="n"&gt;mean&lt;/span&gt;&lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ndv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;double_pct&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="n"&gt;approx_nunique&lt;/span&gt;&lt;span class="o"&gt;`&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="k"&gt;CASE&lt;/span&gt;
      &lt;span class="k"&gt;WHEN&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;float_col&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;AND&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;float_col&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;THEN&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
      &lt;span class="k"&gt;WHEN&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;float_col&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;AND&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;float_col&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;THEN&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
      &lt;span class="k"&gt;ELSE&lt;/span&gt; &lt;span class="k"&gt;NULL&lt;/span&gt;
    &lt;span class="k"&gt;END&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="n"&gt;bucket&lt;/span&gt;&lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;double_col&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="k"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;double_col&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;OVER&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="n"&gt;double_pct&lt;/span&gt;&lt;span class="o"&gt;`&lt;/span&gt;
  &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;ibis_testing&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="n"&gt;functional_alltypes&lt;/span&gt;&lt;span class="o"&gt;`&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;t0&lt;/span&gt;
&lt;span class="k"&gt;GROUP&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ibis's SQL translation toolchain is extensively tested in &lt;code&gt;ibis/sql/tests&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Adapting Ibis to work with other systems that use the SQL language primarily
involves addressing engine-specific differences in Step 3. There may be some
nuances in Step 2; as a concrete example, not all databases have explicit
semi-joins, which Ibis uses to adapt Top-N filter operations.&lt;/p&gt;
&lt;p&gt;If you want to enable Ibis to use a SQL engine that you have available, like
Vertica or PostgreSQL, I am happy to guide you in the efforts to begin building
a test suite and refactoring Ibis's SQL translation subsystem to target
multiple SQL dialects. The hard part (and why I won't promise to build the
integrations myself) is thorough integration testing; think of it as "code
coverage" for SQL. It's not enough to generate the queries; you have to make
sure they work.&lt;/p&gt;
&lt;h2&gt;Executing Ibis expressions with pandas?&lt;/h2&gt;
&lt;p&gt;This is hypothetically possible, but there are some feature gaps in pandas, and
pandas's loose type system (and known issues with &lt;code&gt;NULL&lt;/code&gt; / &lt;code&gt;NA&lt;/code&gt; values) would
be a barrier. If someone wants to discuss this with me in more detail please
get in touch.&lt;/p&gt;
&lt;p&gt;I expect that an in-memory backend for Ibis will exist at some point in the
future, but it's unlikely to use pandas. Interoperability with pandas is a
separate issue, and using Ibis alongside pandas is a primary use case.&lt;/p&gt;
&lt;h2&gt;Why Ibis doesn't use SQLAlchemy (yet)&lt;/h2&gt;
&lt;p&gt;Several people have asked me, "Wes, why aren't you using
&lt;a href="http://www.sqlalchemy.org/"&gt;SQLAlchemy&lt;/a&gt; to generate SQL code in Ibis? It does
away with all the database-specific differences!"  This is only half true. Here
are the main reasons:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Impala will soon have complex types and its own SQL syntax for expressing
  queries involving arrays, structs, and maps as primitive value types. Engines
  like Presto also have this functionality and their own syntax for writing
  queries on such data. SQLAlchemy support for complex types is unlikely to
  drop in time (i.e. the next 6 months or sooner).&lt;/li&gt;
&lt;li&gt;We have to write interface code to wrap all the SQL built-in functions, and
  many of these are database specific. SQLAlchemy provides an extension API for
  wrapping functions, but it was easier, at least initially, to handle all the
  function wrapping within Ibis.&lt;/li&gt;
&lt;li&gt;Impala, like Hive, has various big data-specific DDL commands and modifiers;
  we are generating more than only &lt;code&gt;SELECT&lt;/code&gt;, &lt;code&gt;INSERT&lt;/code&gt;, and &lt;code&gt;CREATE TABLE&lt;/code&gt;
  statements.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That being said, I would like to see a SQLAlchemy version of Ibis's SQL
translation toolchain, in particular for targeting traditional RDBMSs like
PostgreSQL or MySQL.&lt;/p&gt;
&lt;p&gt;SQLAlchemy handles a number of things, like input sanitization, that Ibis does
not yet, so there are likely some code reuse opportunities there.&lt;/p&gt;
&lt;h2&gt;Why Impala is so key to the Ibis vision&lt;/h2&gt;
&lt;p&gt;Among the production-grade open source big data systems one may consider,
Impala is the only one that does not run on the JVM. So, SQL performance /
interactivity considerations aside, we (myself and the Impala team) are working
on shared memory / binary interoperability with Python that eliminates the data
serialization and memory use overhead that has plagued Python extension APIs
(for user-defined functions) on top of JVM-based runtimes. Most importantly, it
will allow users to use scientific Python tools (like Cython) to write high
performance code that operates on data flowing around the Impala C++/LLVM
runtime. If you have to pay a high transfer cost to move data to and from
Python, the benefits of such tools can be largely negated in many use cases.&lt;/p&gt;
&lt;h2&gt;Will Ibis be useful without Impala&lt;/h2&gt;
&lt;p&gt;Oh, yes, incredibly useful. The value of writing Python code (high level)
instead of SQL code (low level) is extremely high. More on this in a future
post.&lt;/p&gt;
&lt;h2&gt;About Blaze (Python project)&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://blaze.pydata.org"&gt;Blaze&lt;/a&gt; (from my friends at &lt;a href="http://continuum.io"&gt;Continuum Analytics&lt;/a&gt;) is a Python project with &lt;em&gt;some&lt;/em&gt; overlapping
goals with Ibis. Both use the same general technical approach of building a
decoupled expression API with a separate compiler-executor. Overall I would
describe them as providing two distinct domain specific languages for
structured data having different priorities (based on what I see on GitHub).&lt;/p&gt;
&lt;p&gt;While it's too nuanced for this blog post, I will state my views on how Blaze
is similar to / different from Ibis as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Blaze has varying levels of support for &lt;em&gt;lots of backends&lt;/em&gt;. The price of this
  is that any given backend is likely missing substantial functionality in
  Blaze's expression API (I know this to be true from reading the test
  suite). We started Ibis with comprehensive coverage of &lt;em&gt;one backend&lt;/em&gt; (Impala,
  for which we are developing an efficient Python extension API) as a blueprint
  for additional backends to be contributed by the community.&lt;/li&gt;
&lt;li&gt;I don't believe it was ever a goal of Blaze to replace SQL (the language) in
  user workflows.&lt;/li&gt;
&lt;li&gt;Blaze's expression API is designed fairly differently. I may do an in-depth
  comparison of how the differences play out in real code (sooner if a lot of
  people are interested).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Complete coverage of the functionality provided by &lt;em&gt;one&lt;/em&gt; SQL engine is
truthfully a fairly difficult problem. There are canonical database benchmark
suites like TPC-H and TPC-DS that you can use to put a lot of stress on any
given DSL that can emit SQL queries.&lt;/p&gt;
&lt;p&gt;If you're trying to decide which project to use, look at the projects (the test
suites, in particular) and make your own decisions.&lt;/p&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;With the current completeness of the Impala SQL backend in Ibis, the work of
integrating with other data engines that speak SQL is relatively
straightforward and incremental. I will happily welcome well-tested
contributions to the project.&lt;/p&gt;
&lt;p&gt;In an upcoming blog post, I will write in some more detail about how Ibis will
help bring about a post-SQL world and why that will be a productivity boon for
data analysts everywhere.&lt;/p&gt;</summary></entry><entry><title>Hello World</title><link href="http://blog.ibis-project.org/articles/2015/07/23hello-world/" rel="alternate"></link><updated>2015-07-23T19:41:00-07:00</updated><author><name>Wes McKinney</name></author><id>tag:blog.ibis-project.org,2015-07-23:articles/2015/07/23hello-world/</id><summary type="html">

&lt;p&gt;Welcome to the Ibis project blog. As the project develops we'll post here
periodically with:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Applications and use cases&lt;/li&gt;
&lt;li&gt;Development updates and release notes&lt;/li&gt;
&lt;li&gt;Details on project internals and design&lt;/li&gt;
&lt;li&gt;Updates from Impala development and the broader community&lt;/li&gt;
&lt;li&gt;Thought pieces on the Big Data and Python ecosystems&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I'm looking forward to the journey; it's going to be really exciting.&lt;/p&gt;
</summary></entry></feed>