<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Ibis Project Blog</title><link href="http://blog.ibis-project.org/" rel="alternate"></link><link href="/atom.xml" rel="self"></link><id>http://blog.ibis-project.org/</id><updated>2015-08-14T09:30:00-07:00</updated><entry><title>Ibis 0.4.0 release</title><link href="http://blog.ibis-project.org/release-0.4/" rel="alternate"></link><updated>2015-08-14T09:30:00-07:00</updated><author><name>Wes McKinney</name></author><id>tag:blog.ibis-project.org,2015-08-14:release-0.4/</id><summary type="html">

&lt;p&gt;The next Ibis release is out, check out the detailed &lt;a href="http://docs.ibis-project.org/release.html"&gt;release notes&lt;/a&gt;.&lt;/p&gt;


&lt;p&gt;Notable features in this release (some of which will be the subject of upcoming
blog posts):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Using Impala user-defined C++ functions with Ibis (&lt;a href="http://docs.ibis-project.org/impala-udf.html"&gt;docs here&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Better composability and chaining by passing functions as parameters&lt;/li&gt;
&lt;li&gt;An ORM-like layer for interacting with database objects&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.ibis-project.org/design-modeling-analytics-1/"&gt;Enhanced TopK expressions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Support for Kerberos-enabled secure HDFS clusters&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Thanks to all who contributed patches:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git log v0.3.0..v0.4.0 --pretty&lt;span class="o"&gt;=&lt;/span&gt;format:%aN &lt;span class="p"&gt;|&lt;/span&gt; sort &lt;span class="p"&gt;|&lt;/span&gt; uniq -c &lt;span class="p"&gt;|&lt;/span&gt; sort -rn
     &lt;span class="m"&gt;38&lt;/span&gt; Wes McKinney
      &lt;span class="m"&gt;9&lt;/span&gt; Uri Laserson
      &lt;span class="m"&gt;2&lt;/span&gt; Meghana Vuyyuru
      &lt;span class="m"&gt;2&lt;/span&gt; Kristopher Overholt
      &lt;span class="m"&gt;1&lt;/span&gt; Marius van Niekerk
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The next major release will offer&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Python 3 support (this was blocked on upstream dependencies, sorry)&lt;/li&gt;
&lt;li&gt;Impala C++ aggregate function (UDA) support&lt;/li&gt;
&lt;li&gt;Async expression execution API (cancellation, progress, etc.)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I'm looking for people interested in helping build Ibis support for any of the
following compute engines:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hive&lt;/li&gt;
&lt;li&gt;PostgreSQL flavors: Redshift, PostgreSQL, HP Vertica&lt;/li&gt;
&lt;li&gt;MySQL&lt;/li&gt;
&lt;li&gt;SQLite&lt;/li&gt;
&lt;li&gt;Presto&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If interested please contact me.&lt;/p&gt;</summary></entry><entry><title>Ibis Design: Modeling high level analytics tasks</title><link href="http://blog.ibis-project.org/design-modeling-analytics-1/" rel="alternate"></link><updated>2015-08-10T08:00:00-07:00</updated><author><name>Wes McKinney</name></author><id>tag:blog.ibis-project.org,2015-08-10:design-modeling-analytics-1/</id><summary type="html">&lt;p&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;

&lt;p&gt;Outside of scalability and high performance on large data sets with Python, Ibis is focused on simplifying analytics tasks for end users. By designing a rich pandas-like domain specific language (DSL) embedded in Python code, we can hide away the complexities normally associated with expressing analytical concepts in SQL or some other tool. This post gives some specific examples and shows how we're solving them in Ibis. &lt;/p&gt;
&lt;!-- 
* [TopK case study](#topkcasestudy)
* [A better TopK](#bettertopk)
* [Another example: bucketing](#bucketing)
--&gt;
&lt;/div&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h2 id="case-study-the-topk-operation"&gt;&lt;a href="topkcasestudy"&gt;&lt;/a&gt; Case Study: The TopK Operation&lt;/h2&gt;
&lt;p&gt;We've all been there; you have some higher cardinality category and you wish to restrict your analysis to a fixed subset of values according to a ranking that you devise. If you're using pandas, you might do something like:&lt;/p&gt;
&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;K &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="dv"&gt;5&lt;/span&gt;

avg_value &lt;span class="op"&gt;=&lt;/span&gt; data.groupby(&lt;span class="st"&gt;&amp;#39;category&amp;#39;&lt;/span&gt;).value.mean()
top_categories &lt;span class="op"&gt;=&lt;/span&gt; avg_value.order(ascending&lt;span class="op"&gt;=&lt;/span&gt;&lt;span class="va"&gt;False&lt;/span&gt;)[:K].index

filtered_data &lt;span class="op"&gt;=&lt;/span&gt; data[data.category.isin(top_categories)]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Let's look at a concrete example using both Ibis and SQL. I'm using the now-classic &lt;a href="http://blog.ibis-project.org/pages/data.html"&gt;airlines dataset&lt;/a&gt; in Parquet format.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell vbox"&gt;
&lt;div class="input hbox"&gt;
&lt;div class="prompt input_prompt"&gt;
In&amp;nbsp;[1]:
&lt;/div&gt;
&lt;div class="input_area box-flex1"&gt;
&lt;div class="highlight-ipynb"&gt;&lt;pre class="ipynb"&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;ibis&lt;/span&gt;

&lt;span class="n"&gt;ibis&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;interactive&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;

&lt;span class="n"&gt;ic&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ibis&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;impala_connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;bottou01.sjc.cloudera.com&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;hdfs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ibis&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hdfs_connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;bottou01.sjc.cloudera.com&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;con&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ibis&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;make_client&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ic&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;hdfs_client&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;hdfs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;airlines&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;con&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parquet_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;/user/wesm/airlines-parquet&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;persist&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
                            &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;airlines_parquet&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;database&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;wes&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c"&gt;# airlines.compute_stats()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;Let's look at the top 5 origin airports by total number of flights:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell vbox"&gt;
&lt;div class="input hbox"&gt;
&lt;div class="prompt input_prompt"&gt;
In&amp;nbsp;[2]:
&lt;/div&gt;
&lt;div class="input_area box-flex1"&gt;
&lt;div class="highlight-ipynb"&gt;&lt;pre class="ipynb"&gt;&lt;span class="n"&gt;query&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="s"&gt;SELECT origin, count(*) as `nrows`&lt;/span&gt;
&lt;span class="s"&gt;FROM wes.airlines_parquet&lt;/span&gt;
&lt;span class="s"&gt;GROUP BY 1&lt;/span&gt;
&lt;span class="s"&gt;ORDER BY nrows DESC&lt;/span&gt;
&lt;span class="s"&gt;LIMIT 5&lt;/span&gt;
&lt;span class="s"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;expr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;con&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sql&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;expr&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;div class="vbox output_wrapper"&gt;
&lt;div class="output vbox"&gt;


&lt;div class="hbox output_area"&gt;&lt;div class="prompt output_prompt"&gt;
    Out[2]:&lt;/div&gt;
&lt;div class="box-flex1 output_subarea output_pyout"&gt;


&lt;pre&gt;
  origin    nrows
0    ORD  6597442
1    ATL  6100953
2    DFW  5710980
3    LAX  4089012
4    PHX  3491077
&lt;/pre&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;Constructed from SQL primitives, the TopK operation consists of 3 tasks&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Aggregate&lt;/li&gt;
&lt;li&gt;Sort&lt;/li&gt;
&lt;li&gt;Limit&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here is the Impala query plan for this (use &lt;code&gt;con.explain(expr)&lt;/code&gt; with Ibis to see it)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;05:MERGING-EXCHANGE [UNPARTITIONED]
|  order by: count(*) DESC
|  limit: 5
|
02:TOP-N [LIMIT=5]
|  order by: count(*) DESC
|
04:AGGREGATE [FINALIZE]
|  output: count:merge(*)
|  group by: origin
|
03:EXCHANGE [HASH(origin)]
|
01:AGGREGATE
|  output: count(*)
|  group by: origin
|
00:SCAN HDFS [wes.airlines_parquet]
   partitions=1/1 files=8 size=1.34GB&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you can see, Impala, like most SQL engines, has the built-in notion of &lt;code&gt;TOP-N&lt;/code&gt; in its query engine, but yet this is not expressible directly in SQL. Things get more complicated when you want to filter down to the categories in the result:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SELECT dest, avg(arrdelay) as `nrows`
FROM wes.airlines_parquet
WHERE origin in (
  SELECT origin 
  FROM (
    SELECT origin, count(*) as `nrows`
    FROM wes.airlines_parquet
    GROUP BY 1
    ORDER BY nrows DESC
    LIMIT 5  
  ) t0
)
GROUP BY 1&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you look at the query plan for this, it's more complicated but functionally contains the same TopK pattern plus a filter (using a &lt;code&gt;LEFT SEMI JOIN&lt;/code&gt;, a type of efficient &lt;em&gt;filter join&lt;/em&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h2 id="a-better-topk-workflow-with-ibis"&gt;&lt;a href="bettertopk"&gt;&lt;/a&gt; A better TopK workflow with Ibis&lt;/h2&gt;
&lt;p&gt;Ibis is happy to let you build your own TopK expression using primitive operations:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell vbox"&gt;
&lt;div class="input hbox"&gt;
&lt;div class="prompt input_prompt"&gt;
In&amp;nbsp;[3]:
&lt;/div&gt;
&lt;div class="input_area box-flex1"&gt;
&lt;div class="highlight-ipynb"&gt;&lt;pre class="ipynb"&gt;&lt;span class="n"&gt;top_origins&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;airlines&lt;/span&gt;
               &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group_by&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;origin&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
               &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;aggregate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;airlines&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;nrows&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
               &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort_by&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ibis&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;desc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;nrows&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
               &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;limit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;top_origins&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;div class="vbox output_wrapper"&gt;
&lt;div class="output vbox"&gt;


&lt;div class="hbox output_area"&gt;&lt;div class="prompt output_prompt"&gt;
    Out[3]:&lt;/div&gt;
&lt;div class="box-flex1 output_subarea output_pyout"&gt;

&lt;div class="output_html rendered_html"&gt;
&lt;div style="max-width:1500px;overflow:auto;"&gt;
&lt;table border="1" class="dataframe"&gt;
  &lt;thead&gt;
    &lt;tr style="text-align: right;"&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;origin&lt;/th&gt;
      &lt;th&gt;nrows&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;ORD&lt;/td&gt;
      &lt;td&gt;6597442&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;ATL&lt;/td&gt;
      &lt;td&gt;6100953&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;DFW&lt;/td&gt;
      &lt;td&gt;5710980&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;LAX&lt;/td&gt;
      &lt;td&gt;4089012&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;PHX&lt;/td&gt;
      &lt;td&gt;3491077&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;This same aggregated table can be used as a filter, too:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell vbox"&gt;
&lt;div class="input hbox"&gt;
&lt;div class="prompt input_prompt"&gt;
In&amp;nbsp;[4]:
&lt;/div&gt;
&lt;div class="input_area box-flex1"&gt;
&lt;div class="highlight-ipynb"&gt;&lt;pre class="ipynb"&gt;&lt;span class="c"&gt;# Replace nulls with 0&lt;/span&gt;
&lt;span class="n"&gt;avg_delay&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;airlines&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arrdelay&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mean&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fillna&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;avg_delay&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;subset_airlines&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;airlines&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;airlines&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;origin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;top_origins&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;origin&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
                    
&lt;span class="n"&gt;avg_delay_subset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;subset_airlines&lt;/span&gt;
                    &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group_by&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;dest&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;aggregate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;avg_delay&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort_by&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ibis&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;desc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;avg_delay&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
                    &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;limit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;avg_delay_subset&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;div class="vbox output_wrapper"&gt;
&lt;div class="output vbox"&gt;


&lt;div class="hbox output_area"&gt;&lt;div class="prompt output_prompt"&gt;
    Out[4]:&lt;/div&gt;
&lt;div class="box-flex1 output_subarea output_pyout"&gt;

&lt;div class="output_html rendered_html"&gt;
&lt;div style="max-width:1500px;overflow:auto;"&gt;
&lt;table border="1" class="dataframe"&gt;
  &lt;thead&gt;
    &lt;tr style="text-align: right;"&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;dest&lt;/th&gt;
      &lt;th&gt;avg_delay&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;RDM&lt;/td&gt;
      &lt;td&gt;29.558824&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;SOP&lt;/td&gt;
      &lt;td&gt;25.598706&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;MQT&lt;/td&gt;
      &lt;td&gt;25.367129&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;HHH&lt;/td&gt;
      &lt;td&gt;23.744963&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;ACY&lt;/td&gt;
      &lt;td&gt;20.344538&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;5&lt;/th&gt;
      &lt;td&gt;PSE&lt;/td&gt;
      &lt;td&gt;19.000000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;6&lt;/th&gt;
      &lt;td&gt;CPR&lt;/td&gt;
      &lt;td&gt;18.383459&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;7&lt;/th&gt;
      &lt;td&gt;CWA&lt;/td&gt;
      &lt;td&gt;18.002533&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;8&lt;/th&gt;
      &lt;td&gt;SCE&lt;/td&gt;
      &lt;td&gt;16.741325&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;9&lt;/th&gt;
      &lt;td&gt;ATW&lt;/td&gt;
      &lt;td&gt;16.138655&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;This is quite a bit of data gymnastics, though, and you haven't really modeled the fundamental Top-N task with the API. Because we have the power to create higher-level abstractions and expand them later into concrete operations (backend-dependent), we can craft a &lt;code&gt;topk&lt;/code&gt; operation:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell vbox"&gt;
&lt;div class="input hbox"&gt;
&lt;div class="prompt input_prompt"&gt;
In&amp;nbsp;[5]:
&lt;/div&gt;
&lt;div class="input_area box-flex1"&gt;
&lt;div class="highlight-ipynb"&gt;&lt;pre class="ipynb"&gt;&lt;span class="n"&gt;top_origins&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;airlines&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;origin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;topk&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;The result of &lt;code&gt;topk&lt;/code&gt; in Ibis is what's known as an &lt;em&gt;analytic expression&lt;/em&gt;. Its behavior depends on the context in which it's used. It is executable as is, yielding the top 5 origins by count:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell vbox"&gt;
&lt;div class="input hbox"&gt;
&lt;div class="prompt input_prompt"&gt;
In&amp;nbsp;[6]:
&lt;/div&gt;
&lt;div class="input_area box-flex1"&gt;
&lt;div class="highlight-ipynb"&gt;&lt;pre class="ipynb"&gt;&lt;span class="n"&gt;top_origins&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;div class="vbox output_wrapper"&gt;
&lt;div class="output vbox"&gt;


&lt;div class="hbox output_area"&gt;&lt;div class="prompt output_prompt"&gt;
    Out[6]:&lt;/div&gt;
&lt;div class="box-flex1 output_subarea output_pyout"&gt;

&lt;div class="output_html rendered_html"&gt;
&lt;div style="max-width:1500px;overflow:auto;"&gt;
&lt;table border="1" class="dataframe"&gt;
  &lt;thead&gt;
    &lt;tr style="text-align: right;"&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;origin&lt;/th&gt;
      &lt;th&gt;count&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;ORD&lt;/td&gt;
      &lt;td&gt;6597442&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;ATL&lt;/td&gt;
      &lt;td&gt;6100953&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;DFW&lt;/td&gt;
      &lt;td&gt;5710980&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;LAX&lt;/td&gt;
      &lt;td&gt;4089012&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;PHX&lt;/td&gt;
      &lt;td&gt;3491077&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;But you can also use it directly as a table filter:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell vbox"&gt;
&lt;div class="input hbox"&gt;
&lt;div class="prompt input_prompt"&gt;
In&amp;nbsp;[7]:
&lt;/div&gt;
&lt;div class="input_area box-flex1"&gt;
&lt;div class="highlight-ipynb"&gt;&lt;pre class="ipynb"&gt;&lt;span class="n"&gt;expr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;airlines&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;top_origins&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group_by&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;dest&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;aggregate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;avg_delay&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort_by&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ibis&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;desc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;avg_delay&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;limit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;expr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;div class="vbox output_wrapper"&gt;
&lt;div class="output vbox"&gt;


&lt;div class="hbox output_area"&gt;&lt;div class="prompt output_prompt"&gt;
    Out[7]:&lt;/div&gt;
&lt;div class="box-flex1 output_subarea output_pyout"&gt;

&lt;div class="output_html rendered_html"&gt;
&lt;div style="max-width:1500px;overflow:auto;"&gt;
&lt;table border="1" class="dataframe"&gt;
  &lt;thead&gt;
    &lt;tr style="text-align: right;"&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;dest&lt;/th&gt;
      &lt;th&gt;avg_delay&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;RDM&lt;/td&gt;
      &lt;td&gt;29.558824&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;SOP&lt;/td&gt;
      &lt;td&gt;25.598706&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;MQT&lt;/td&gt;
      &lt;td&gt;25.367129&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;HHH&lt;/td&gt;
      &lt;td&gt;23.744963&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;ACY&lt;/td&gt;
      &lt;td&gt;20.344538&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;5&lt;/th&gt;
      &lt;td&gt;PSE&lt;/td&gt;
      &lt;td&gt;19.000000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;6&lt;/th&gt;
      &lt;td&gt;CPR&lt;/td&gt;
      &lt;td&gt;18.383459&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;7&lt;/th&gt;
      &lt;td&gt;CWA&lt;/td&gt;
      &lt;td&gt;18.002533&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;8&lt;/th&gt;
      &lt;td&gt;SCE&lt;/td&gt;
      &lt;td&gt;16.741325&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;9&lt;/th&gt;
      &lt;td&gt;ATW&lt;/td&gt;
      &lt;td&gt;16.138655&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;What's going on here is that the &lt;code&gt;top_origins&lt;/code&gt; expression is a sort of &lt;em&gt;logical data type&lt;/em&gt; that hasn't yet been adapted to any physical data operations. There's a number of ways it can be used, and that adaptation process happens automatically:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell vbox"&gt;
&lt;div class="input hbox"&gt;
&lt;div class="prompt input_prompt"&gt;
In&amp;nbsp;[8]:
&lt;/div&gt;
&lt;div class="input_area box-flex1"&gt;
&lt;div class="highlight-ipynb"&gt;&lt;pre class="ipynb"&gt;&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;top_origins&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;div class="vbox output_wrapper"&gt;
&lt;div class="output vbox"&gt;


&lt;div class="hbox output_area"&gt;&lt;div class="prompt output_prompt"&gt;
    Out[8]:&lt;/div&gt;
&lt;div class="box-flex1 output_subarea output_pyout"&gt;


&lt;pre&gt;
ibis.expr.operations.TopKExpr
&lt;/pre&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;You might notice that I've sneakily done two TopK operations in a row, the first ranking by count and the second by average arrival delay. &lt;code&gt;topk&lt;/code&gt; luckily gives you a way to provide a ranking metric other than count:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell vbox"&gt;
&lt;div class="input hbox"&gt;
&lt;div class="prompt input_prompt"&gt;
In&amp;nbsp;[9]:
&lt;/div&gt;
&lt;div class="input_area box-flex1"&gt;
&lt;div class="highlight-ipynb"&gt;&lt;pre class="ipynb"&gt;&lt;span class="n"&gt;airlines&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;origin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;topk&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;by&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;avg_delay&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;div class="vbox output_wrapper"&gt;
&lt;div class="output vbox"&gt;


&lt;div class="hbox output_area"&gt;&lt;div class="prompt output_prompt"&gt;
    Out[9]:&lt;/div&gt;
&lt;div class="box-flex1 output_subarea output_pyout"&gt;

&lt;div class="output_html rendered_html"&gt;
&lt;div style="max-width:1500px;overflow:auto;"&gt;
&lt;table border="1" class="dataframe"&gt;
  &lt;thead&gt;
    &lt;tr style="text-align: right;"&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;origin&lt;/th&gt;
      &lt;th&gt;avg_delay&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;FMN&lt;/td&gt;
      &lt;td&gt;164.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;OGD&lt;/td&gt;
      &lt;td&gt;148.4&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;CYS&lt;/td&gt;
      &lt;td&gt;122.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;BFF&lt;/td&gt;
      &lt;td&gt;93.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;PIR&lt;/td&gt;
      &lt;td&gt;33.5&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;We can combine all this together to do a double-TopN:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell vbox"&gt;
&lt;div class="input hbox"&gt;
&lt;div class="prompt input_prompt"&gt;
In&amp;nbsp;[10]:
&lt;/div&gt;
&lt;div class="input_area box-flex1"&gt;
&lt;div class="highlight-ipynb"&gt;&lt;pre class="ipynb"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;avg_delay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arrdelay&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mean&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fillna&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;avg_delay&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    
&lt;span class="n"&gt;expr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;airlines&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;top_origins&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;topk&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;by&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;avg_delay&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;expr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;div class="vbox output_wrapper"&gt;
&lt;div class="output vbox"&gt;


&lt;div class="hbox output_area"&gt;&lt;div class="prompt output_prompt"&gt;
    Out[10]:&lt;/div&gt;
&lt;div class="box-flex1 output_subarea output_pyout"&gt;

&lt;div class="output_html rendered_html"&gt;
&lt;div style="max-width:1500px;overflow:auto;"&gt;
&lt;table border="1" class="dataframe"&gt;
  &lt;thead&gt;
    &lt;tr style="text-align: right;"&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;dest&lt;/th&gt;
      &lt;th&gt;avg_delay&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;RDM&lt;/td&gt;
      &lt;td&gt;29.558824&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;SOP&lt;/td&gt;
      &lt;td&gt;25.598706&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;MQT&lt;/td&gt;
      &lt;td&gt;25.367129&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;HHH&lt;/td&gt;
      &lt;td&gt;23.744963&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;ACY&lt;/td&gt;
      &lt;td&gt;20.344538&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;5&lt;/th&gt;
      &lt;td&gt;PSE&lt;/td&gt;
      &lt;td&gt;19.000000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;6&lt;/th&gt;
      &lt;td&gt;CPR&lt;/td&gt;
      &lt;td&gt;18.383459&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;7&lt;/th&gt;
      &lt;td&gt;CWA&lt;/td&gt;
      &lt;td&gt;18.002533&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;8&lt;/th&gt;
      &lt;td&gt;SCE&lt;/td&gt;
      &lt;td&gt;16.741325&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;9&lt;/th&gt;
      &lt;td&gt;ATW&lt;/td&gt;
      &lt;td&gt;16.138655&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h2 id="another-example-bucketing"&gt;Another example: bucketing&lt;/h2&gt;
&lt;p&gt;&lt;a href="bucketing"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Why stop there? After seeing lots of use cases in the wild where code reuse and composability would make analysts a great deal more productive, we'll be working to build more and more high level analytics tools into Ibis.&lt;/p&gt;
&lt;p&gt;As another example which I present as mostly code-only, consider the task of creating a discrete binning of arrival delays and computing a number of metrics. I'll let the code speak for itself:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell vbox"&gt;
&lt;div class="input hbox"&gt;
&lt;div class="prompt input_prompt"&gt;
In&amp;nbsp;[11]:
&lt;/div&gt;
&lt;div class="input_area box-flex1"&gt;
&lt;div class="highlight-ipynb"&gt;&lt;pre class="ipynb"&gt;&lt;span class="n"&gt;airlines&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arrdelay&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;summary&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;div class="vbox output_wrapper"&gt;
&lt;div class="output vbox"&gt;


&lt;div class="hbox output_area"&gt;&lt;div class="prompt output_prompt"&gt;
    Out[11]:&lt;/div&gt;
&lt;div class="box-flex1 output_subarea output_pyout"&gt;


&lt;pre&gt;
       count    nulls   min   max        sum      mean  approx_nunique
0  120947440  2587529 -1437  2598  852674931  7.049963            3801
&lt;/pre&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell vbox"&gt;
&lt;div class="input hbox"&gt;
&lt;div class="prompt input_prompt"&gt;
In&amp;nbsp;[12]:
&lt;/div&gt;
&lt;div class="input_area box-flex1"&gt;
&lt;div class="highlight-ipynb"&gt;&lt;pre class="ipynb"&gt;&lt;span class="n"&gt;delay_buckets&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;120&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="nb"&gt;bin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;airlines&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arrdelay&lt;/span&gt;
       &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fillna&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
       &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bucket&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;delay_buckets&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
               &lt;span class="n"&gt;include_over&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
               &lt;span class="n"&gt;include_under&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;delay_bin&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="n"&gt;delay_summary&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;airlines&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group_by&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;bin&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arrdelay&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;summary&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;delay_summary&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;div class="vbox output_wrapper"&gt;
&lt;div class="output vbox"&gt;


&lt;div class="hbox output_area"&gt;&lt;div class="prompt output_prompt"&gt;
    Out[12]:&lt;/div&gt;
&lt;div class="box-flex1 output_subarea output_pyout"&gt;


&lt;pre&gt;
   delay_bin     count    nulls   min   max        sum        mean  \
0          3   4039142        0    60   120  333493735   82.565489   
1          4   1594279        0   121  2598  290961107  182.503255   
2          1  44759224        0     1    29  451748992   10.092869   
3          0  63108269  2587529 -1437     0 -531724696   -8.425595   
4          2   7446526        0    30    59  308195793   41.387862   

   approx_nunique  
0              62  
1            2490  
2              29  
3             471  
4              30  
&lt;/pre&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell vbox"&gt;
&lt;div class="input hbox"&gt;
&lt;div class="prompt input_prompt"&gt;
In&amp;nbsp;[13]:
&lt;/div&gt;
&lt;div class="input_area box-flex1"&gt;
&lt;div class="highlight-ipynb"&gt;&lt;pre class="ipynb"&gt;&lt;span class="n"&gt;bin_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;delay_summary&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;delay_bin&lt;/span&gt;
            &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;On time&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Less then 30 min&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="s"&gt;&amp;#39;30 min to 1 hour&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
                    &lt;span class="s"&gt;&amp;#39;1 to 2 hours&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="s"&gt;&amp;#39;More than 2 hours&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
&lt;span class="n"&gt;expr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;delay_summary&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mutate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bin_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;bin_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;expr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort_by&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;delay_bin&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;div class="vbox output_wrapper"&gt;
&lt;div class="output vbox"&gt;


&lt;div class="hbox output_area"&gt;&lt;div class="prompt output_prompt"&gt;
    Out[13]:&lt;/div&gt;
&lt;div class="box-flex1 output_subarea output_pyout"&gt;


&lt;pre&gt;
   delay_bin     count    nulls   min   max        sum        mean  \
0          0  63108269  2587529 -1437     0 -531724696   -8.425595   
1          1  44759224        0     1    29  451748992   10.092869   
2          2   7446526        0    30    59  308195793   41.387862   
3          3   4039142        0    60   120  333493735   82.565489   
4          4   1594279        0   121  2598  290961107  182.503255   

   approx_nunique           bin_name  
0             471            On time  
1              29   Less then 30 min  
2              30   30 min to 1 hour  
3              62       1 to 2 hours  
4            2490  More than 2 hours  
&lt;/pre&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;In future posts I'll go into some more detail on category types in Ibis (like the result of &lt;code&gt;bucket&lt;/code&gt;) and some of the other tools used here.&lt;/p&gt;
&lt;/div&gt;&lt;/p&gt;</summary></entry><entry><title>Using other compute engines with Ibis</title><link href="http://blog.ibis-project.org/other-compute-engines/" rel="alternate"></link><updated>2015-08-02T22:22:00-07:00</updated><author><name>Wes McKinney</name></author><id>tag:blog.ibis-project.org,2015-08-02:other-compute-engines/</id><summary type="html">

&lt;p&gt;Several people have asked me about using Ibis with execution engines other than
Impala. The purpose of this post is to explain how one can make Ibis work with
other systems and what that might mean for the actual users.&lt;/p&gt;


&lt;h2&gt;Context&lt;/h2&gt;
&lt;p&gt;A primary goal of Ibis is to enable users to productively solve data analysis
problems at any scale using 100% Python code, while leveraging the existing
ecosystem of 3rd party libraries and high performance computing tools as much
as possible. Personally, I'd like to see folks using tools like Cython to
accelerate mission-critical analytics on a petabyte of data, and we simply are
not there yet.&lt;/p&gt;
&lt;p&gt;"100% Python" is not a gimmick; it means that Ibis, among other things, will
also need to enable full utilization of the data analysis capabilities provided
by SQL without writing any actual SQL code. The "writing SQL [in Python]
without writing SQL" is such an important, and frankly nuanced, topic that I'm
going to write a dedicated follow up blog post about it.&lt;/p&gt;
&lt;p&gt;Starting in late 2014, I began developing a joint roadmap with the Impala team
at Cloudera to solve the painful performance and usability problems that Python
programmers experience at large scale (multi-terabyte to petabyte
workloads). Since I've been focused on support and integration with Impala
(which I understand not everyone has available yet), people have asked me about
using Ibis with other systems like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Other SQL-on-Hadoop compute engines: Hive, Presto, and others&lt;/li&gt;
&lt;li&gt;Other "full-stack" (storage + compute) SQL engines: PostgreSQL, MySQL,
  Vertica, etc.&lt;/li&gt;
&lt;li&gt;Generalized compute engines: Spark&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Short answer: yes, if someone writes an Ibis expression translator for these
platform targets, they can be used with them with no problems. Where things get
dicey is how to make Python &lt;em&gt;user-defined functions&lt;/em&gt; (which can't be compiled
to SQL or some other form) run fast (or run at all); something that we are
doing internal work in Impala to enable.&lt;/p&gt;
&lt;p&gt;I'm really excited in particular to see more SQL-based backends built for Ibis
so that data analysts can just use Python instead of a mix of Python and SQL
(the unfortunate status quo). It's not as much work as you might think.&lt;/p&gt;
&lt;h2&gt;Building new SQL backends for Ibis&lt;/h2&gt;
&lt;p&gt;Ibis contains a fully-decoupled data expression API that implements a &lt;em&gt;superset
of SQL semantics&lt;/em&gt;. My view is that if you can write it in SQL, you should be
able to write it in a composable, reusable, and testable Pythonic (or
pandas-ic?) way with Ibis.&lt;/p&gt;
&lt;p&gt;When you build and execute an Ibis expression using Impala SQL, here's what
happens:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;The expression is analyzed and validated (types and relational semantics)
   while you're building it. So when you want to execute it you can be sure that
   it is valid. All of this code lives in &lt;code&gt;ibis/expr&lt;/code&gt; in the codebase. I'll
   definitely write some follow up posts and documentation going into detail on
   the expression API design.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The expression is "compiled" to identify each component corresponding to the
   parts of a SQL statement. See &lt;code&gt;ibis/sql/compiler.py&lt;/code&gt; (NB. this module may
   move in the future).&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In this step, further analysis takes place to expand higher-level Ibis
  constructs into concrete low-level SQL primitives.&lt;/li&gt;
&lt;li&gt;Note this even handles all the SQL "weird stuff" like correlated
  subqueries; I'll write more technical detail about this in the future.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The compiled SELECT data structure is translated into a valid SQL query. This
   falls into two buckets of functionality:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ibis/sql/ddl.py&lt;/code&gt;: the primary SQL statement builder classes.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ibis/sql/exprs.py&lt;/code&gt;: translates Ibis operations and arguments into
  concrete SQL function calls. This includes all built-in analytical
  functions functions, case statements, "synthetic" operations like
  bucketing, window functions, and so forth.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;To give you a concrete example, the Ibis code&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;37&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;bucket&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;float_col&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bucket&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;38&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;double_pct&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;double_col&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;double_col&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;39&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;expr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mutate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bucket&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;bucket&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;double_pct&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;double_pct&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="o"&gt;....&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;         &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group_by&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;bucket&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;string_col&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
   &lt;span class="o"&gt;....&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;         &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;double_pct&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;summary&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;expr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
   &lt;span class="n"&gt;bucket&lt;/span&gt; &lt;span class="n"&gt;string_col&lt;/span&gt;  &lt;span class="n"&gt;count&lt;/span&gt;  &lt;span class="n"&gt;nulls&lt;/span&gt;       &lt;span class="nb"&gt;min&lt;/span&gt;       &lt;span class="nb"&gt;max&lt;/span&gt;       &lt;span class="nb"&gt;sum&lt;/span&gt;      &lt;span class="n"&gt;mean&lt;/span&gt;  &lt;span class="n"&gt;approx_nunique&lt;/span&gt;
&lt;span class="mi"&gt;0&lt;/span&gt;       &lt;span class="mi"&gt;0&lt;/span&gt;          &lt;span class="mi"&gt;1&lt;/span&gt;    &lt;span class="mi"&gt;730&lt;/span&gt;      &lt;span class="mi"&gt;0&lt;/span&gt;  &lt;span class="mf"&gt;0.000030&lt;/span&gt;  &lt;span class="mf"&gt;0.000030&lt;/span&gt;  &lt;span class="mf"&gt;0.022222&lt;/span&gt;  &lt;span class="mf"&gt;0.000030&lt;/span&gt;               &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt;       &lt;span class="mi"&gt;0&lt;/span&gt;          &lt;span class="mi"&gt;4&lt;/span&gt;    &lt;span class="mi"&gt;730&lt;/span&gt;      &lt;span class="mi"&gt;0&lt;/span&gt;  &lt;span class="mf"&gt;0.000122&lt;/span&gt;  &lt;span class="mf"&gt;0.000122&lt;/span&gt;  &lt;span class="mf"&gt;0.088889&lt;/span&gt;  &lt;span class="mf"&gt;0.000122&lt;/span&gt;               &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt;       &lt;span class="mi"&gt;1&lt;/span&gt;          &lt;span class="mi"&gt;6&lt;/span&gt;    &lt;span class="mi"&gt;730&lt;/span&gt;      &lt;span class="mi"&gt;0&lt;/span&gt;  &lt;span class="mf"&gt;0.000183&lt;/span&gt;  &lt;span class="mf"&gt;0.000183&lt;/span&gt;  &lt;span class="mf"&gt;0.133333&lt;/span&gt;  &lt;span class="mf"&gt;0.000183&lt;/span&gt;               &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="mi"&gt;3&lt;/span&gt;       &lt;span class="mi"&gt;1&lt;/span&gt;          &lt;span class="mi"&gt;9&lt;/span&gt;    &lt;span class="mi"&gt;730&lt;/span&gt;      &lt;span class="mi"&gt;0&lt;/span&gt;  &lt;span class="mf"&gt;0.000274&lt;/span&gt;  &lt;span class="mf"&gt;0.000274&lt;/span&gt;  &lt;span class="mf"&gt;0.200000&lt;/span&gt;  &lt;span class="mf"&gt;0.000274&lt;/span&gt;               &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="mi"&gt;4&lt;/span&gt;       &lt;span class="mi"&gt;0&lt;/span&gt;          &lt;span class="mi"&gt;3&lt;/span&gt;    &lt;span class="mi"&gt;730&lt;/span&gt;      &lt;span class="mi"&gt;0&lt;/span&gt;  &lt;span class="mf"&gt;0.000091&lt;/span&gt;  &lt;span class="mf"&gt;0.000091&lt;/span&gt;  &lt;span class="mf"&gt;0.066667&lt;/span&gt;  &lt;span class="mf"&gt;0.000091&lt;/span&gt;               &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="mi"&gt;5&lt;/span&gt;       &lt;span class="mi"&gt;0&lt;/span&gt;          &lt;span class="mi"&gt;0&lt;/span&gt;    &lt;span class="mi"&gt;730&lt;/span&gt;      &lt;span class="mi"&gt;0&lt;/span&gt;  &lt;span class="mf"&gt;0.000000&lt;/span&gt;  &lt;span class="mf"&gt;0.000000&lt;/span&gt;  &lt;span class="mf"&gt;0.000000&lt;/span&gt;  &lt;span class="mf"&gt;0.000000&lt;/span&gt;               &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="mi"&gt;6&lt;/span&gt;       &lt;span class="mi"&gt;1&lt;/span&gt;          &lt;span class="mi"&gt;5&lt;/span&gt;    &lt;span class="mi"&gt;730&lt;/span&gt;      &lt;span class="mi"&gt;0&lt;/span&gt;  &lt;span class="mf"&gt;0.000152&lt;/span&gt;  &lt;span class="mf"&gt;0.000152&lt;/span&gt;  &lt;span class="mf"&gt;0.111111&lt;/span&gt;  &lt;span class="mf"&gt;0.000152&lt;/span&gt;               &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="mi"&gt;7&lt;/span&gt;       &lt;span class="mi"&gt;1&lt;/span&gt;          &lt;span class="mi"&gt;7&lt;/span&gt;    &lt;span class="mi"&gt;730&lt;/span&gt;      &lt;span class="mi"&gt;0&lt;/span&gt;  &lt;span class="mf"&gt;0.000213&lt;/span&gt;  &lt;span class="mf"&gt;0.000213&lt;/span&gt;  &lt;span class="mf"&gt;0.155556&lt;/span&gt;  &lt;span class="mf"&gt;0.000213&lt;/span&gt;               &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="mi"&gt;8&lt;/span&gt;       &lt;span class="mi"&gt;1&lt;/span&gt;          &lt;span class="mi"&gt;8&lt;/span&gt;    &lt;span class="mi"&gt;730&lt;/span&gt;      &lt;span class="mi"&gt;0&lt;/span&gt;  &lt;span class="mf"&gt;0.000244&lt;/span&gt;  &lt;span class="mf"&gt;0.000244&lt;/span&gt;  &lt;span class="mf"&gt;0.177778&lt;/span&gt;  &lt;span class="mf"&gt;0.000244&lt;/span&gt;               &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="mi"&gt;9&lt;/span&gt;       &lt;span class="mi"&gt;0&lt;/span&gt;          &lt;span class="mi"&gt;2&lt;/span&gt;    &lt;span class="mi"&gt;730&lt;/span&gt;      &lt;span class="mi"&gt;0&lt;/span&gt;  &lt;span class="mf"&gt;0.000061&lt;/span&gt;  &lt;span class="mf"&gt;0.000061&lt;/span&gt;  &lt;span class="mf"&gt;0.044444&lt;/span&gt;  &lt;span class="mf"&gt;0.000061&lt;/span&gt;               &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;internally runs the SQL query&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;bucket&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;string_col&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;double_pct&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="k"&gt;count&lt;/span&gt;&lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
       &lt;span class="k"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;double_pct&lt;/span&gt; &lt;span class="k"&gt;IS&lt;/span&gt; &lt;span class="k"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="n"&gt;nulls&lt;/span&gt;&lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;double_pct&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="k"&gt;min&lt;/span&gt;&lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
       &lt;span class="k"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;double_pct&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="k"&gt;max&lt;/span&gt;&lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;double_pct&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="k"&gt;sum&lt;/span&gt;&lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
       &lt;span class="k"&gt;avg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;double_pct&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="n"&gt;mean&lt;/span&gt;&lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ndv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;double_pct&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="n"&gt;approx_nunique&lt;/span&gt;&lt;span class="o"&gt;`&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="k"&gt;CASE&lt;/span&gt;
      &lt;span class="k"&gt;WHEN&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;float_col&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;AND&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;float_col&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;THEN&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
      &lt;span class="k"&gt;WHEN&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;float_col&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;AND&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;float_col&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;THEN&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
      &lt;span class="k"&gt;ELSE&lt;/span&gt; &lt;span class="k"&gt;NULL&lt;/span&gt;
    &lt;span class="k"&gt;END&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="n"&gt;bucket&lt;/span&gt;&lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;double_col&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="k"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;double_col&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;OVER&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="n"&gt;double_pct&lt;/span&gt;&lt;span class="o"&gt;`&lt;/span&gt;
  &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;ibis_testing&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="n"&gt;functional_alltypes&lt;/span&gt;&lt;span class="o"&gt;`&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;t0&lt;/span&gt;
&lt;span class="k"&gt;GROUP&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ibis's SQL translation toolchain is extensively tested in &lt;code&gt;ibis/sql/tests&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Adapting Ibis to work with other systems that use the SQL language primarily
involves addressing engine-specific differences in Step 3. There may be some
nuances in Step 2; as a concrete example, not all databases have explicit
semi-joins, which Ibis uses to adapt Top-N filter operations.&lt;/p&gt;
&lt;p&gt;If you want to enable Ibis to use a SQL engine that you have available, like
Vertica or PostgreSQL, I am happy to guide you in the efforts to begin building
a test suite and refactoring Ibis's SQL translation subsystem to target
multiple SQL dialects. The hard part (and why I won't promise to build the
integrations myself) is thorough integration testing; think of it as "code
coverage" for SQL. It's not enough to generate the queries; you have to make
sure they work.&lt;/p&gt;
&lt;h2&gt;Executing Ibis expressions with pandas?&lt;/h2&gt;
&lt;p&gt;This is hypothetically possible, but there are some feature gaps in pandas, and
pandas's loose type system (and known issues with &lt;code&gt;NULL&lt;/code&gt; / &lt;code&gt;NA&lt;/code&gt; values) would
be a barrier. If someone wants to discuss this with me in more detail please
get in touch.&lt;/p&gt;
&lt;p&gt;I expect that an in-memory backend for Ibis will exist at some point in the
future, but it's unlikely to use pandas. Interoperability with pandas is a
separate issue, and using Ibis alongside pandas is a primary use case.&lt;/p&gt;
&lt;h2&gt;Why Ibis doesn't use SQLAlchemy (yet)&lt;/h2&gt;
&lt;p&gt;Several people have asked me, "Wes, why aren't you using
&lt;a href="http://www.sqlalchemy.org/"&gt;SQLAlchemy&lt;/a&gt; to generate SQL code in Ibis? It does
away with all the database-specific differences!"  This is only half true. Here
are the main reasons:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Impala will soon have complex types and its own SQL syntax for expressing
  queries involving arrays, structs, and maps as primitive value types. Engines
  like Presto also have this functionality and their own syntax for writing
  queries on such data. SQLAlchemy support for complex types is unlikely to
  drop in time (i.e. the next 6 months or sooner).&lt;/li&gt;
&lt;li&gt;We have to write interface code to wrap all the SQL built-in functions, and
  many of these are database specific. SQLAlchemy provides an extension API for
  wrapping functions, but it was easier, at least initially, to handle all the
  function wrapping within Ibis.&lt;/li&gt;
&lt;li&gt;Impala, like Hive, has various big data-specific DDL commands and modifiers;
  we are generating more than only &lt;code&gt;SELECT&lt;/code&gt;, &lt;code&gt;INSERT&lt;/code&gt;, and &lt;code&gt;CREATE TABLE&lt;/code&gt;
  statements.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That being said, I would like to see a SQLAlchemy version of Ibis's SQL
translation toolchain, in particular for targeting traditional RDBMSs like
PostgreSQL or MySQL.&lt;/p&gt;
&lt;p&gt;SQLAlchemy handles a number of things, like input sanitization, that Ibis does
not yet, so there are likely some code reuse opportunities there.&lt;/p&gt;
&lt;h2&gt;Why Impala is so key to the Ibis vision&lt;/h2&gt;
&lt;p&gt;Among the production-grade open source big data systems one may consider,
Impala is the only one that does not run on the JVM. So, SQL performance /
interactivity considerations aside, we (myself and the Impala team) are working
on shared memory / binary interoperability with Python that eliminates the data
serialization and memory use overhead that has plagued Python extension APIs
(for user-defined functions) on top of JVM-based runtimes. Most importantly, it
will allow users to use scientific Python tools (like Cython) to write high
performance code that operates on data flowing around the Impala C++/LLVM
runtime. If you have to pay a high transfer cost to move data to and from
Python, the benefits of such tools can be largely negated in many use cases.&lt;/p&gt;
&lt;h2&gt;Will Ibis be useful without Impala&lt;/h2&gt;
&lt;p&gt;Oh, yes, incredibly useful. The value of writing Python code (high level)
instead of SQL code (low level) is extremely high. More on this in a future
post.&lt;/p&gt;
&lt;h2&gt;About Blaze (Python project)&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://blaze.pydata.org"&gt;Blaze&lt;/a&gt; (from my friends at &lt;a href="http://continuum.io"&gt;Continuum Analytics&lt;/a&gt;) is a Python project with &lt;em&gt;some&lt;/em&gt; overlapping
goals with Ibis. Both use the same general technical approach of building a
decoupled expression API with a separate compiler-executor. Overall I would
describe them as providing two distinct domain specific languages for
structured data having different priorities (based on what I see on GitHub).&lt;/p&gt;
&lt;p&gt;While it's too nuanced for this blog post, I will state my views on how Blaze
is similar to / different from Ibis as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Blaze has varying levels of support for &lt;em&gt;lots of backends&lt;/em&gt;. The price of this
  is that any given backend is likely missing substantial functionality in
  Blaze's expression API (I know this to be true from reading the test
  suite). We started Ibis with comprehensive coverage of &lt;em&gt;one backend&lt;/em&gt; (Impala,
  for which we are developing an efficient Python extension API) as a blueprint
  for additional backends to be contributed by the community.&lt;/li&gt;
&lt;li&gt;I don't believe it was ever a goal of Blaze to replace SQL (the language) in
  user workflows.&lt;/li&gt;
&lt;li&gt;Blaze's expression API is designed fairly differently. I may do an in-depth
  comparison of how the differences play out in real code (sooner if a lot of
  people are interested).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Complete coverage of the functionality provided by &lt;em&gt;one&lt;/em&gt; SQL engine is
truthfully a fairly difficult problem. There are canonical database benchmark
suites like TPC-H and TPC-DS that you can use to put a lot of stress on any
given DSL that can emit SQL queries.&lt;/p&gt;
&lt;p&gt;If you're trying to decide which project to use, look at the projects (the test
suites, in particular) and make your own decisions.&lt;/p&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;With the current completeness of the Impala SQL backend in Ibis, the work of
integrating with other data engines that speak SQL is relatively
straightforward and incremental. I will happily welcome well-tested
contributions to the project.&lt;/p&gt;
&lt;p&gt;In an upcoming blog post, I will write in some more detail about how Ibis will
help bring about a post-SQL world and why that will be a productivity boon for
data analysts everywhere.&lt;/p&gt;</summary></entry><entry><title>Hello World</title><link href="http://blog.ibis-project.org/hello-world/" rel="alternate"></link><updated>2015-07-23T19:41:00-07:00</updated><author><name>Wes McKinney</name></author><id>tag:blog.ibis-project.org,2015-07-23:hello-world/</id><summary type="html">

&lt;p&gt;Welcome to the Ibis project blog. As the project develops we'll post here
periodically with:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Applications and use cases&lt;/li&gt;
&lt;li&gt;Development updates and release notes&lt;/li&gt;
&lt;li&gt;Details on project internals and design&lt;/li&gt;
&lt;li&gt;Updates from Impala development and the broader community&lt;/li&gt;
&lt;li&gt;Thought pieces on the Big Data and Python ecosystems&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I'm looking forward to the journey; it's going to be really exciting.&lt;/p&gt;
</summary></entry></feed>